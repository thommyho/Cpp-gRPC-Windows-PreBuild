# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Steps toDo:
# 
# Trigger-Events
# (o) on new tags
# Required Build-Tooling
# (x) Visual Studio 2022(x) with C++ packages installed
# (x) New enough CMake
# (o) NASM compiler
# (o) Golang compiler
# (o) Apply fixes
# (o) Build Test-Package
# (o) Build Release-Package
# (o) Update Documentation

trigger:
- master

pool:
  vmImage: windows-2022
workspace:
      clean: all
variables:
    build_grpc_version: '1.50.0'
    build_configuration: 'Release'
    build_architecture: 'x64'
    build_toolchain: 'MSVC143'
steps:
 - script: |
      pip install lastversion==2.4.7 
   displayName: 'Install pip package last version'

#  - task: DownloadGitHubRelease@0
#    displayName: 'Chekout: Birko.Data'
#    inputs:
#     connection: 'birko-test'
#     userRepository: 'grpc/grpc'
#     defaultVersionType: 'latest'
# steps:
# - script: |
#      git clone --depth=1 -b v$(build_grpc_version) https://github.com/grpc/grpc
#      md _out
#      md $(build_architecture)_$(build_configuration)
#      md $(build_architecture)_$(build_configuration)\$(build_toolchain)
#      md $(build_architecture)_$(build_configuration)\$(build_toolchain)\lib
#      md $(build_architecture)_$(build_configuration)\$(build_toolchain)\bin
#      md $(build_architecture)_$(build_configuration)\$(build_toolchain)\include
#      dir $(Build.SourcesDirectory)
#   displayName: '[Git] Checkout Sources'

# - script: |
#     git submodule update --init --depth=1
#     md _mybuild
#   workingDirectory: $(Build.SourcesDirectory)/grpc
#   displayName: '[Git] Get submodules'

# - task: CMake@1
#   displayName: '[CMake] Configure'
#   inputs:
#       workingDirectory: $(Build.SourcesDirectory)/grpc/_mybuild
#       cmakeArgs: .. -G "Visual Studio 17 2022" -A x64 -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)\_out -DCMAKE_BUILD_TYPE=$(build_configuration) -DLIBRARY_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\lib -DEXECUTABLE_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\bin -DCMAKE_SYSTEM_VERSION=10.0.19041
# - script: |
#     dir $(Build.SourcesDirectory)\grpc\_mybuild
# - task: MSBuild@1
#   displayName: '[MSBuild] Build Project'
#   inputs:
#     solution: '$(Build.SourcesDirectory)/grpc/_mybuild/ALL_BUILD.vcxproj'
#     maximumCpuCount: true
#     platform: '$(build_architecture)'
#     configuration: '$(build_configuration)'
# - task: MSBuild@1
#   displayName: '[MSBuild] Install missing sources'
#   inputs:
#     solution: '$(Build.SourcesDirectory)/grpc/_mybuild/INSTALL.vcxproj'
#     maximumCpuCount: true
#     platform: '$(build_architecture)'
#     configuration: '$(build_configuration)'

# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)/grpc/_mybuild/third_party/cares/cares/lib/$(build_configuration)'
#     Contents: '**'
#     TargetFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/lib'
# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)/_out/lib/$(build_configuration)'
#     Contents: '**'
#     TargetFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/lib'

# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)/_out/include'
#     Contents: '**'
#     TargetFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/include'
# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)/_out/bin'
#     Contents: '**'
#     TargetFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/bin'

# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/bin/$(build_configuration)'
#     Contents: '**'
#     TargetFolder: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/bin'
#     OverWrite: true

# - script: |
#     rmdir "$(build_configuration)" /S /Q
#   workingDirectory: $(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)/$(build_toolchain)/bin
#   displayName: '[Cleanup] Remove unwanted directories'

# - task: ArchiveFiles@2
#   displayName: '[Zipping] Compress all together'
#   inputs:
#     rootFolderOrFile: '$(Build.SourcesDirectory)/$(build_architecture)_$(build_configuration)'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_$(build_architecture)_$(build_configuration)_$(build_toolchain).zip'
#     replaceExistingArchive: true
# - task: PublishBuildArtifacts@1
#   displayName: '[Publish] Archive and publish to Azure'
#   inputs:
#      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#      ArtifactName: $(build_architecture)_$(build_configuration)_$(build_toolchain)
