trigger:
- testing

pool:
  vmImage: windows-2022
workspace:
      clean: all
    
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12'
    addToPath: true
    architecture: 'x64'

- task: DownloadSecureFile@1
  name: FetchSSHKey
  inputs:
    secureFile: 'id_rsa'  # The name of your SSH private key file

- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: |
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
    sshKeySecureFile: id_rsa
# Install NASM using Chocolatey
- script: |
    where choco
    choco install nasm -y --verbose
  displayName: Install NASM with Chocolatey

# Add NASM to PATH explicitly
- script: |
    dir "C:\Program Files\NASM\"
  displayName: Add NASM to PATH

##### Works
- task: CmdLine@2
  inputs:
    script: 'echo ##vso[task.prependpath]C:\Program Files\NASM\'
######

# Verify NASM installation
- script: |
    nasm --version
  displayName: Verify NASM Installation
- script: |
    python -m pip install --upgrade pip    
    python -m pip install git+https://$(GITHUB_USER):$(GITHUB_PAT)@github.com/$(GITHUB_USER)/gci-cli.git@develop
  displayName: Install gci-cli from Private GitHub Repository (Develop Branch)
- script:  |
    gci version
  displayName: Verify gci Installation
# Prepare fetching information
- script: |
      md _build
      md _build/build
      md _build/install
  displayName: Create Subdirectories

- script:  |
    gci platform generate-tools-info
#   gci-cli release generate-repository-info --latest
  workingDirectory: $(Build.SourcesDirectory)/_build
  displayName: Generate platform information from host

- script:  |
    dir $(Build.SourcesDirectory)
    dir $(Build.SourcesDirectory)/_build
    dir .
  displayName: Verfify (debug print) directory structure

#### Clone stage
- script:  |
    gci gci clone source
    gci-cli build -c $(Build.SourcesDirectory)/_build/build_config.json -s $(Build.SourcesDirectory)/_build/source -b $(Build.SourcesDirectory)/_build/build -i $(Build.SourcesDirectory)/_build/install -pi $(Build.SourcesDirectory)/_build/platform.json 
  workingDirectory: $(Build.SourcesDirectory)/_build
  displayName: Clone the gRPC in target version

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.SourcesDirectory)/_build/build'
    artifact: 'packages'
    publishLocation: 'pipeline'
#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: '$(Build.SourcesDirectory)'
#    ArtifactName: 'drop'
#    publishLocation: 'Container'

